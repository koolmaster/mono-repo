import { useState } from 'react'

interface PageProps {
  sdk: any
  config?: {
    theme: string
    hideHeader: boolean
    hideFooter: boolean
    customerId: string
    embedMode: boolean
  }
}

function Payments({ sdk, config }: PageProps) {
  const [formData, setFormData] = useState({
    amount: '',
    currency: 'USD',
    description: '',
    customerEmail: ''
  })
  const [isProcessing, setIsProcessing] = useState(false)
  const [result, setResult] = useState<any>(null)

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    })
  }

  const handlePayment = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsProcessing(true)
    setResult(null)

    try {
      const paymentData = {
        amount: parseFloat(formData.amount),
        currency: formData.currency,
        description: formData.description,
        customerEmail: formData.customerEmail,
        customerId: config?.customerId
      }

      console.log('üí≥ Processing payment...', paymentData)
      
      const paymentResult = await sdk.processPayment(paymentData)
      setResult(paymentResult)

      // Send result to parent window if in embed mode
      if (config?.embedMode && paymentResult.success) {
        window.parent.postMessage({
          type: 'PAYMENT_SUCCESS',
          data: paymentResult
        }, '*')
      }

    } catch (error) {
      console.error('Payment failed:', error)
      setResult({
        success: false,
        error: 'Payment processing failed'
      })
    } finally {
      setIsProcessing(false)
    }
  }

  return (
    <div className="payments-page">
      <div className="page-header">
        <h2>üí∞ Process Payment</h2>
        {config?.embedMode && (
          <div className="embed-badge">üîó Embedded Mode</div>
        )}
      </div>

      <form onSubmit={handlePayment} className="payment-form payment-sensitive">
        <div className="form-row">
          <div className="form-group">
            <label htmlFor="amount">Amount *</label>
            <input
              type="number"
              id="amount"
              name="amount"
              value={formData.amount}
              onChange={handleInputChange}
              placeholder="0.00"
              step="0.01"
              min="0.01"
              required
              disabled={isProcessing}
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="currency">Currency *</label>
            <select
              id="currency"
              name="currency"
              value={formData.currency}
              onChange={handleInputChange}
              required
              disabled={isProcessing}
            >
              <option value="USD">USD - US Dollar</option>
              <option value="EUR">EUR - Euro</option>
              <option value="GBP">GBP - British Pound</option>
              <option value="VND">VND - Vietnamese Dong</option>
              <option value="JPY">JPY - Japanese Yen</option>
            </select>
          </div>
        </div>

        <div className="form-group">
          <label htmlFor="customerEmail">Customer Email</label>
          <input
            type="email"
            id="customerEmail"
            name="customerEmail"
            value={formData.customerEmail}
            onChange={handleInputChange}
            placeholder="customer@example.com"
            disabled={isProcessing}
          />
        </div>

        <div className="form-group">
          <label htmlFor="description">Description</label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleInputChange}
            placeholder="Payment description..."
            rows={3}
            disabled={isProcessing}
          />
        </div>

        {formData.amount && (
          <div className="payment-preview">
            <h4>Payment Preview</h4>
            <p>Amount: <strong>{sdk.formatCurrency(parseFloat(formData.amount), formData.currency)}</strong></p>
            {config?.customerId && (
              <p>Customer: <strong>{config.customerId}</strong></p>
            )}
          </div>
        )}

        <button 
          type="submit" 
          className={`btn-primary payment-button ${isProcessing ? 'processing' : ''}`}
          disabled={isProcessing || !formData.amount}
        >
          {isProcessing ? (
            <>
              <span className="spinner"></span>
              Processing...
            </>
          ) : (
            `üí≥ Process ${formData.amount ? sdk.formatCurrency(parseFloat(formData.amount), formData.currency) : 'Payment'}`
          )}
        </button>
      </form>

      {result && (
        <div className={`payment-result ${result.success ? 'success' : 'error'}`}>
          <div className="result-icon">
            {result.success ? '‚úÖ' : '‚ùå'}
          </div>
          <h3>{result.success ? 'Payment Successful!' : 'Payment Failed'}</h3>
          
          {result.success ? (
            <div className="success-details">
              <p><strong>Transaction ID:</strong> {result.transactionId}</p>
              {result.paymentUrl && (
                <a href={result.paymentUrl} target="_blank" rel="noopener noreferrer" className="btn-secondary">
                  Complete Payment
                </a>
              )}
            </div>
          ) : (
            <div className="error-details">
              <p><strong>Error:</strong> {result.error}</p>
              <button 
                onClick={() => setResult(null)} 
                className="btn-secondary"
              >
                Try Again
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  )
}

export default Payments
